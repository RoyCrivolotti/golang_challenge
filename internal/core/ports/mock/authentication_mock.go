// Code generated by MockGen. DO NOT EDIT.
// Source: ./authentication.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	domain "golangchallenge/internal/core/domain"
	errorx "golangchallenge/internal/errorx"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuthenticationService is a mock of IAuthenticationService interface.
type MockIAuthenticationService struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthenticationServiceMockRecorder
}

// MockIAuthenticationServiceMockRecorder is the mock recorder for MockIAuthenticationService.
type MockIAuthenticationServiceMockRecorder struct {
	mock *MockIAuthenticationService
}

// NewMockIAuthenticationService creates a new mock instance.
func NewMockIAuthenticationService(ctrl *gomock.Controller) *MockIAuthenticationService {
	mock := &MockIAuthenticationService{ctrl: ctrl}
	mock.recorder = &MockIAuthenticationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthenticationService) EXPECT() *MockIAuthenticationServiceMockRecorder {
	return m.recorder
}

// SignIn mocks base method.
func (m *MockIAuthenticationService) SignIn(ctx context.Context, authenticationData domain.AuthenticationData) (errorx.Error, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", ctx, authenticationData)
	ret0, _ := ret[0].(errorx.Error)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockIAuthenticationServiceMockRecorder) SignIn(ctx, authenticationData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockIAuthenticationService)(nil).SignIn), ctx, authenticationData)
}

// SignUp mocks base method.
func (m *MockIAuthenticationService) SignUp(ctx context.Context, authenticationData domain.AuthenticationData) (errorx.Error, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, authenticationData)
	ret0, _ := ret[0].(errorx.Error)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIAuthenticationServiceMockRecorder) SignUp(ctx, authenticationData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIAuthenticationService)(nil).SignUp), ctx, authenticationData)
}
