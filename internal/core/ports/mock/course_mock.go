// Code generated by MockGen. DO NOT EDIT.
// Source: ./course.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	domain "golangchallenge/internal/core/domain"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockICourseService is a mock of ICourseService interface.
type MockICourseService struct {
	ctrl     *gomock.Controller
	recorder *MockICourseServiceMockRecorder
}

// MockICourseServiceMockRecorder is the mock recorder for MockICourseService.
type MockICourseServiceMockRecorder struct {
	mock *MockICourseService
}

// NewMockICourseService creates a new mock instance.
func NewMockICourseService(ctrl *gomock.Controller) *MockICourseService {
	mock := &MockICourseService{ctrl: ctrl}
	mock.recorder = &MockICourseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICourseService) EXPECT() *MockICourseServiceMockRecorder {
	return m.recorder
}

// SortCourses mocks base method.
func (m *MockICourseService) SortCourses(ctx context.Context, courses domain.UserCourseData) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SortCourses", ctx, courses)
	ret0, _ := ret[0].([]string)
	return ret0
}

// SortCourses indicates an expected call of SortCourses.
func (mr *MockICourseServiceMockRecorder) SortCourses(ctx, courses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SortCourses", reflect.TypeOf((*MockICourseService)(nil).SortCourses), ctx, courses)
}

// MockICourseRepository is a mock of ICourseRepository interface.
type MockICourseRepository struct {
	ctrl     *gomock.Controller
	recorder *MockICourseRepositoryMockRecorder
}

// MockICourseRepositoryMockRecorder is the mock recorder for MockICourseRepository.
type MockICourseRepositoryMockRecorder struct {
	mock *MockICourseRepository
}

// NewMockICourseRepository creates a new mock instance.
func NewMockICourseRepository(ctrl *gomock.Controller) *MockICourseRepository {
	mock := &MockICourseRepository{ctrl: ctrl}
	mock.recorder = &MockICourseRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICourseRepository) EXPECT() *MockICourseRepositoryMockRecorder {
	return m.recorder
}
